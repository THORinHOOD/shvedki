{"version":3,"sources":["chessUtils/chessEngine.js","logo.svg","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["ChessEngine","require","Chess","App","React","PureComponent","props","state","login","client","ingame","connected","yourLastTurn","additionalPieces","queen","horse","elephant","rook","pawn","document","getElementById","value","this","W3CWebSocket","onopen","console","log","setState","onmessage","message","msg","JSON","parse","data","type","status","onRecInit","onRecStep","onRecNewPiece","onRecAddPiece","num","send","stringify","slot","adP","piece","innerHTML","i","firstBoard","secondBoard","players","setPosition","new_piece","newPiece","move","step","start","getColor","flip","setLoginsToLabels","addEventListener","e","detail","source","orientation","search","preventDefault","checkNewPiecePlace","target","newPosition","oldPosition","updateNewPiece","piece_type","position","onClick","enter","className","id","for","spare-pieces","draggable-pieces","placeholder","connect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment"],"mappings":"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","file":"static/js/main.853c4d8c.chunk.js","sourcesContent":["\nconst { Chess } = require('chess.js')\n// const game = new Chess()\n\nclass ChessEngine {\n\n    constructor() {\n        // this.game = game;\n    }\n\n    \n}\n\n\nexport default ChessEngine;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import '../App.css';\nimport React, {Component} from 'react';\nimport ChessEngine from '../chessUtils/chessEngine.js';\nimport Player from '../chessUtils/Player.js'\nimport 'chessboard-element';\n\nconst Chess = require('react-chess')\n\nclass Game extends React.PureComponent {\n  \n  constructor(props) {\n    super(props)\n    console.log(props);\n    this.state = {\n      pieces:Chess.getDefaultLineup(),\n      chessEngine: new ChessEngine(),\n      turn : true,\n      yourLastTurn : null,\n      login: props.login,\n      recInit : this.onRecInit,\n      client : props.client,\n    }\n\n    this.state.client.onmessage = this.onRecMsg;\n  }\n\n  \n\n  componentDidMount() {\n    // this.onRecInit({\n    //   firstPlayer: new Player('login1', 'b'),\n    //   secondPlayer: new Player('login2', 'w'),\n    //   thirdPlayer: new Player('login3', 'w'),\n    //   fourthPlayer: new Player('login4', 'b')\n    // })\n  }\n\n  render() {\n    \n    return (\n      <div>hhh</div>\n    );\n  }\n}\n\nexport default Game;\n","import logo from './logo.svg';\nimport './App.css';\nimport React, {Component} from 'react';\nimport ChessEngine from '../src/chessUtils/chessEngine.js';\nimport 'chessboard-element';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport Game from '../src/components/Game.js';\nimport Player from './chessUtils/Player';\n\nconst Chess = require('react-chess')\n\nclass App extends React.PureComponent {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      login : null,\n      client : null,\n      ingame: false,\n      connected : false,\n\n      yourLastTurn: null,\n\n      additionalPieces: {\n        queen : 0,\n        horse : 0,\n        elephant : 0,\n        rook : 0,\n        pawn : 0\n      }\n    }\n  }\n\n  componentDidMount() {\n  }\n\n  connect() {\n    let login = document.getElementById(\"login\").value;\n    this.state.client = new W3CWebSocket(\"wss://92.63.102.199:5000/\" + login);\n    this.state.client.onopen = () => {\n      console.log(\"Connected\");\n      this.setState({\n        connected : true,\n        login : login,\n      })\n    }\n\n    this.state.client.onmessage = (message) => {\n      console.log(\"Got message in Game\");\n      console.log(message);\n      let msg = JSON.parse(message.data);\n      if (msg.type == 'choose_slot') {\n        if (msg.status == 'OK') {\n          this.setState({\n            ingame: true,\n          });\n        }\n      } else if (msg.type == 'init') {\n        this.onRecInit(msg);\n      } else if (msg.type == 'step') {\n        this.onRecStep(msg);\n      } else if (msg.type == 'new_piece') {\n        this.onRecNewPiece(msg);\n      } else if (msg.type == 'add_piece') {\n        this.onRecAddPiece(msg);\n      }\n    };\n  }\n\n  enter(num) {\n    this.state.client.send(JSON.stringify({\n      type : \"choose_slot\",\n      slot : num\n    }));\n  }\n\n  onRecAddPiece(message) {\n      let adP = this.state.additionalPieces;\n      if (message.piece == 'p') {\n          adP.pawn = adP.pawn + 1;\n          this.setState({\n            additionalPieces : adP,\n          });\n        document.getElementById(\"pawnCount\").innerHTML=\"Пешки : \" + adP.pawn;\n      } else if (message.piece == 'l') {\n        adP.rook = adP.rook + 1;\n        this.setState({\n          additionalPieces : adP,\n        });\n        document.getElementById(\"rookCount\").innerHTML=\"Ладьи : \" + adP.rook;\n      } else if (message.piece == 'k') {\n        adP.horse = adP.horse + 1;\n        this.setState({\n          additionalPieces : adP,\n        });\n        document.getElementById(\"horseCount\").innerHTML=\"Кони : \" + adP.horse;\n      } else if (message.piece == 's') {\n        adP.elephant = adP.elephant + 1;\n        this.setState({\n          additionalPieces : adP,\n        });\n        document.getElementById(\"elephantCount\").innerHTML=\"Слоны : \" + adP.elephant;\n      } else if (message.piece == 'f') {\n        adP.queen = adP.queen + 1;\n        this.setState({\n          additionalPieces : adP,\n        });\n        document.getElementById(\"queenCount\").innerHTML=\"Ферзи : \" + adP.queen;\n      } \n  }\n\n  newPiece(message, i) {\n    let firstBoard = document.getElementById('firstBoard');\n    let secondBoard = document.getElementById('secondBoard');\n    if (message.login == this.state.players[i]) {\n      firstBoard.setPosition(message.new_piece);\n    } else {\n      secondBoard.setPosition(message.new_piece);\n    }\n  }\n\n  onRecNewPiece(message) {\n    if (this.state.login == this.state.players[0]) {\n      this.newPiece(message, 2);\n    } else if (this.state.login == this.state.players[1]) {\n      this.newPiece(message, 3);\n    } else if (this.state.login == this.state.players[2]) {\n      this.newPiece(message, 0);\n    } else if (this.state.login == this.state.players[3]) {\n      this.newPiece(message, 1);\n    }\n  }\n\n  move(message, i) {\n    let firstBoard = document.getElementById('firstBoard');\n    let secondBoard = document.getElementById('secondBoard');\n    if (message.login == this.state.players[i]) {\n      firstBoard.move(message.step);\n    } else {\n      secondBoard.move(message.step);\n    }\n  }\n\n  onRecStep(message) {\n      if (this.state.login == this.state.players[0]) {\n        this.move(message, 2);\n      } else if (this.state.login == this.state.players[1]) {\n        this.move(message, 3);\n      } else if (this.state.login == this.state.players[2]) {\n        this.move(message, 0);\n      } else if (this.state.login == this.state.players[3]) {\n        this.move(message, 1);\n      }\n  }\n\n  getColor() {\n    if (this.state.login == this.state.players[0] || this.state.login == this.state.players[3]) {\n      return 'w';\n    } else {\n      return 'b';\n    }\n  }\n\n  setLoginsToLabels() {\n    document.getElementById('label0').innerHTML = this.state.login;\n    if (this.state.login == this.state.players[0]) {\n      document.getElementById('label1').innerHTML = this.state.players[2];\n      document.getElementById('label2').innerHTML = this.state.players[3];\n      document.getElementById('label3').innerHTML = this.state.players[1];\n    } else if (this.state.login == this.state.players[1]) {\n      document.getElementById('label1').innerHTML = this.state.players[3];\n      document.getElementById('label2').innerHTML = this.state.players[2];\n      document.getElementById('label3').innerHTML = this.state.players[0];\n    } else if (this.state.login == this.state.players[2]) {\n      document.getElementById('label1').innerHTML = this.state.players[0];\n      document.getElementById('label2').innerHTML = this.state.players[1];\n      document.getElementById('label3').innerHTML = this.state.players[3];\n    } else if (this.state.login == this.state.players[3]) {\n      document.getElementById('label1').innerHTML = this.state.players[1];\n      document.getElementById('label2').innerHTML = this.state.players[0];\n      document.getElementById('label3').innerHTML = this.state.players[2];\n    }\n  }\n\n  updateNewPiece(piece) {\n    if (piece[1] == 'Q') {\n      let adP = this.state.additionalPieces;\n      adP.queen = adP.queen - 1;\n      this.setState({\n        additionalPieces : adP\n      });\n      document.getElementById(\"queenCount\").innerHTML=\"Ферзи : \" + adP.queen;\n    } else if (piece[1] == 'R') {\n      let adP = this.state.additionalPieces;\n      adP.rook = adP.rook - 1;\n      this.setState({\n        additionalPieces : adP\n      });\n      document.getElementById(\"rookCount\").innerHTML=\"Ладьи : \" + adP.rook;\n    } else if (piece[1] == 'B') {\n      let adP = this.state.additionalPieces;\n      adP.elephant = adP.elephant - 1;\n      this.setState({\n        additionalPieces : adP\n      })\n      document.getElementById(\"elephantCount\").innerHTML=\"Слоны : \" + adP.elephant;\n    } else if (piece[1] == 'N') {\n      let adP = this.state.additionalPieces;\n      adP.horse = adP.horse - 1;\n      this.setState({\n        additionalPieces : adP\n      });\n      document.getElementById(\"horseCount\").innerHTML=\"Кони : \" + adP.horse;\n    } else if (piece[1] == 'P') {\n      let adP = this.state.additionalPieces;\n      adP.pawn = adP.pawn - 1;\n      this.setState({\n        additionalPieces : adP\n      });\n      document.getElementById(\"pawnCount\").innerHTML=\"Пешки : \" + adP.pawn;\n    }\n  }\n\n  checkNewPiecePlace(piece) {\n    if (piece[1] == 'Q' && this.state.additionalPieces.queen > 0) {\n        return true;\n    } else if (piece[1] == 'R' && this.state.additionalPieces.rook > 0) {\n      return true;\n    } else if (piece[1] == 'B' && this.state.additionalPieces.elephant > 0) {\n      return true;\n    } else if (piece[1] == 'N' && this.state.additionalPieces.horse > 0) {\n      return true;\n    } else if (piece[1] == 'P' && this.state.additionalPieces.pawn > 0) {\n      return true;\n    }\n    return false;\n  }\n\n  onRecInit(message) {\n    this.setState({\n      players: [message.players[0], message.players[1], message.players[2], message.players[3]]\n    }, () => {\n      let firstBoard = document.getElementById('firstBoard');\n      let secondBoard = document.getElementById('secondBoard');\n      firstBoard.start();\n      secondBoard.start();\n      if (this.getColor() == 'b') {\n          firstBoard.flip();\n      } else {\n          secondBoard.flip();\n      }\n\n      this.setLoginsToLabels();\n  \n      firstBoard.addEventListener('drag-start', (e) => {\n          const {source, piece, orientation} = e.detail;\n          console.log(source);\n\n\n\n          if (((this.getColor() == 'w' && piece.search(/^w/) === -1) ||\n              (this.getColor() == 'b' && piece.search(/^b/) === -1))) {\n              e.preventDefault();\n          } else if (source == 'spare' && !this.checkNewPiecePlace(piece)) {\n              e.preventDefault();\n          }\n      });\n  \n      secondBoard.addEventListener('drag-start', (e) => {\n          e.preventDefault();\n      });\n  \n      firstBoard.addEventListener('drop', (e) => {\n        const {source, target, piece, newPosition, oldPosition, orientation} = e.detail;\n        console.log(oldPosition);\n        if (source == 'spare') {\n            this.updateNewPiece(piece);\n            this.state.client.send(JSON.stringify({\n                type : \"new_piece\",\n                new_piece : newPosition,\n                piece_type : piece[1],\n                position : target,\n            }));\n        } else {\n          this.state.client.send(JSON.stringify({\n            type : \"step\",\n            step : source + \"-\" + target,\n          }));\n        }  \n      });\n    });   \n  }\n\n  render() {\n\n    if (!this.state.connected) {\n      return (\n          <div>\n            <table>\n              <td>\n                <tr><input id = \"login\" placeholder=\"Логин\"></input></tr>\n                <tr><button onClick={() => this.connect()}>Присоединиться</button></tr>\n              </td>\n            </table>\n          </div>\n      );\n    } else if (this.state.connected && !this.state.ingame) {\n      return (\n        <div>\n          <table>\n            <td>\n              <tr><button onClick={() => this.enter(0)}>0 слот белый (1 команда)</button></tr>\n              <tr><button onClick={() => this.enter(1)}>1 слот черный (1 команда)</button></tr>\n              <tr><button onClick={() => this.enter(2)}>2 слот черный (2 команда)</button></tr>\n              <tr><button onClick={() => this.enter(3)}>3 слот белый (2 команда)</button></tr>\n            </td>\n          </table>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <table>\n          <tr>\n            <td>\n              <div className=\"chessBoard\">\n                <label id=\"label1\" for=\"firstBoard\">Kek</label>\n                <chess-board className=\"board\" id = \"firstBoard\" spare-pieces position=\"start\" draggable-pieces></chess-board>\n                <label id=\"label0\" for=\"firstBoard\">Kek2</label>\n                <table>\n                  <td>\n                    <tr>\n                      <div id=\"queenCount\">Ферзи : {this.state.additionalPieces.queen}</div>\n                      <div id=\"horseCount\">Кони : {this.state.additionalPieces.horse}</div>\n                      <div id=\"elephantCount\">Слоны : {this.state.additionalPieces.elephant}</div>\n                      <div id=\"rookCount\">Ладьи : {this.state.additionalPieces.rook}</div>\n                      <div id=\"pawnCount\">Пешки : {this.state.additionalPieces.pawn}</div>\n                    </tr> \n                  </td>\n                </table>\n              </div>\n            </td>\n            <td>\n              <div className=\"chessBoard\">\n                <label id=\"label2\" for=\"secondBoard\">Kek4</label>\n                <chess-board id = \"secondBoard\" spare-pieces position=\"start\"></chess-board>\n                <label id=\"label3\" for=\"thirdBoard\">Kek3</label>\n              </div>\n            </td>\n          </tr>\n          </table>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}